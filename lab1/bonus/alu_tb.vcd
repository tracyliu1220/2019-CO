$date
	Mon Apr 15 21:24:02 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module testbench $end
$scope module alu $end
$var wire 4 ! ALU_control [3:0] $end
$var wire 3 " bonus_control [2:0] $end
$var wire 1 # equal $end
$var wire 1 $ less $end
$var wire 1 % overflow $end
$var wire 1 & rst_n $end
$var wire 32 ' src1 [31:0] $end
$var wire 32 ( src2 [31:0] $end
$var wire 1 ) zero $end
$var wire 32 * w_cout [31:0] $end
$var wire 32 + set [31:0] $end
$var wire 32 , result [31:0] $end
$var wire 1 - cout $end
$scope begin genblk1[1] $end
$scope module alu $end
$var wire 1 . A_invert $end
$var wire 1 / B_invert $end
$var wire 3 0 bonus [2:0] $end
$var wire 1 1 cin $end
$var wire 1 2 comp $end
$var wire 1 3 equal $end
$var wire 1 4 less $end
$var wire 2 5 operation [1:0] $end
$var wire 1 6 src1 $end
$var wire 1 7 src2 $end
$var wire 1 8 compare_result $end
$var reg 1 9 _src1 $end
$var reg 1 : _src2 $end
$var reg 1 ; cout $end
$var reg 1 < result $end
$var reg 1 = set $end
$scope module cmp $end
$var wire 3 > bonus [2:0] $end
$var wire 1 2 comp $end
$var wire 1 3 equal $end
$var wire 1 4 less $end
$var reg 1 8 result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$scope module alu $end
$var wire 1 ? A_invert $end
$var wire 1 @ B_invert $end
$var wire 3 A bonus [2:0] $end
$var wire 1 B cin $end
$var wire 1 C comp $end
$var wire 1 D equal $end
$var wire 1 E less $end
$var wire 2 F operation [1:0] $end
$var wire 1 G src1 $end
$var wire 1 H src2 $end
$var wire 1 I compare_result $end
$var reg 1 J _src1 $end
$var reg 1 K _src2 $end
$var reg 1 L cout $end
$var reg 1 M result $end
$var reg 1 N set $end
$scope module cmp $end
$var wire 3 O bonus [2:0] $end
$var wire 1 C comp $end
$var wire 1 D equal $end
$var wire 1 E less $end
$var reg 1 I result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$scope module alu $end
$var wire 1 P A_invert $end
$var wire 1 Q B_invert $end
$var wire 3 R bonus [2:0] $end
$var wire 1 S cin $end
$var wire 1 T comp $end
$var wire 1 U equal $end
$var wire 1 V less $end
$var wire 2 W operation [1:0] $end
$var wire 1 X src1 $end
$var wire 1 Y src2 $end
$var wire 1 Z compare_result $end
$var reg 1 [ _src1 $end
$var reg 1 \ _src2 $end
$var reg 1 ] cout $end
$var reg 1 ^ result $end
$var reg 1 _ set $end
$scope module cmp $end
$var wire 3 ` bonus [2:0] $end
$var wire 1 T comp $end
$var wire 1 U equal $end
$var wire 1 V less $end
$var reg 1 Z result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$scope module alu $end
$var wire 1 a A_invert $end
$var wire 1 b B_invert $end
$var wire 3 c bonus [2:0] $end
$var wire 1 d cin $end
$var wire 1 e comp $end
$var wire 1 f equal $end
$var wire 1 g less $end
$var wire 2 h operation [1:0] $end
$var wire 1 i src1 $end
$var wire 1 j src2 $end
$var wire 1 k compare_result $end
$var reg 1 l _src1 $end
$var reg 1 m _src2 $end
$var reg 1 n cout $end
$var reg 1 o result $end
$var reg 1 p set $end
$scope module cmp $end
$var wire 3 q bonus [2:0] $end
$var wire 1 e comp $end
$var wire 1 f equal $end
$var wire 1 g less $end
$var reg 1 k result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$scope module alu $end
$var wire 1 r A_invert $end
$var wire 1 s B_invert $end
$var wire 3 t bonus [2:0] $end
$var wire 1 u cin $end
$var wire 1 v comp $end
$var wire 1 w equal $end
$var wire 1 x less $end
$var wire 2 y operation [1:0] $end
$var wire 1 z src1 $end
$var wire 1 { src2 $end
$var wire 1 | compare_result $end
$var reg 1 } _src1 $end
$var reg 1 ~ _src2 $end
$var reg 1 !" cout $end
$var reg 1 "" result $end
$var reg 1 #" set $end
$scope module cmp $end
$var wire 3 $" bonus [2:0] $end
$var wire 1 v comp $end
$var wire 1 w equal $end
$var wire 1 x less $end
$var reg 1 | result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$scope module alu $end
$var wire 1 %" A_invert $end
$var wire 1 &" B_invert $end
$var wire 3 '" bonus [2:0] $end
$var wire 1 (" cin $end
$var wire 1 )" comp $end
$var wire 1 *" equal $end
$var wire 1 +" less $end
$var wire 2 ," operation [1:0] $end
$var wire 1 -" src1 $end
$var wire 1 ." src2 $end
$var wire 1 /" compare_result $end
$var reg 1 0" _src1 $end
$var reg 1 1" _src2 $end
$var reg 1 2" cout $end
$var reg 1 3" result $end
$var reg 1 4" set $end
$scope module cmp $end
$var wire 3 5" bonus [2:0] $end
$var wire 1 )" comp $end
$var wire 1 *" equal $end
$var wire 1 +" less $end
$var reg 1 /" result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$scope module alu $end
$var wire 1 6" A_invert $end
$var wire 1 7" B_invert $end
$var wire 3 8" bonus [2:0] $end
$var wire 1 9" cin $end
$var wire 1 :" comp $end
$var wire 1 ;" equal $end
$var wire 1 <" less $end
$var wire 2 =" operation [1:0] $end
$var wire 1 >" src1 $end
$var wire 1 ?" src2 $end
$var wire 1 @" compare_result $end
$var reg 1 A" _src1 $end
$var reg 1 B" _src2 $end
$var reg 1 C" cout $end
$var reg 1 D" result $end
$var reg 1 E" set $end
$scope module cmp $end
$var wire 3 F" bonus [2:0] $end
$var wire 1 :" comp $end
$var wire 1 ;" equal $end
$var wire 1 <" less $end
$var reg 1 @" result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$scope module alu $end
$var wire 1 G" A_invert $end
$var wire 1 H" B_invert $end
$var wire 3 I" bonus [2:0] $end
$var wire 1 J" cin $end
$var wire 1 K" comp $end
$var wire 1 L" equal $end
$var wire 1 M" less $end
$var wire 2 N" operation [1:0] $end
$var wire 1 O" src1 $end
$var wire 1 P" src2 $end
$var wire 1 Q" compare_result $end
$var reg 1 R" _src1 $end
$var reg 1 S" _src2 $end
$var reg 1 T" cout $end
$var reg 1 U" result $end
$var reg 1 V" set $end
$scope module cmp $end
$var wire 3 W" bonus [2:0] $end
$var wire 1 K" comp $end
$var wire 1 L" equal $end
$var wire 1 M" less $end
$var reg 1 Q" result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$scope module alu $end
$var wire 1 X" A_invert $end
$var wire 1 Y" B_invert $end
$var wire 3 Z" bonus [2:0] $end
$var wire 1 [" cin $end
$var wire 1 \" comp $end
$var wire 1 ]" equal $end
$var wire 1 ^" less $end
$var wire 2 _" operation [1:0] $end
$var wire 1 `" src1 $end
$var wire 1 a" src2 $end
$var wire 1 b" compare_result $end
$var reg 1 c" _src1 $end
$var reg 1 d" _src2 $end
$var reg 1 e" cout $end
$var reg 1 f" result $end
$var reg 1 g" set $end
$scope module cmp $end
$var wire 3 h" bonus [2:0] $end
$var wire 1 \" comp $end
$var wire 1 ]" equal $end
$var wire 1 ^" less $end
$var reg 1 b" result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$scope module alu $end
$var wire 1 i" A_invert $end
$var wire 1 j" B_invert $end
$var wire 3 k" bonus [2:0] $end
$var wire 1 l" cin $end
$var wire 1 m" comp $end
$var wire 1 n" equal $end
$var wire 1 o" less $end
$var wire 2 p" operation [1:0] $end
$var wire 1 q" src1 $end
$var wire 1 r" src2 $end
$var wire 1 s" compare_result $end
$var reg 1 t" _src1 $end
$var reg 1 u" _src2 $end
$var reg 1 v" cout $end
$var reg 1 w" result $end
$var reg 1 x" set $end
$scope module cmp $end
$var wire 3 y" bonus [2:0] $end
$var wire 1 m" comp $end
$var wire 1 n" equal $end
$var wire 1 o" less $end
$var reg 1 s" result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$scope module alu $end
$var wire 1 z" A_invert $end
$var wire 1 {" B_invert $end
$var wire 3 |" bonus [2:0] $end
$var wire 1 }" cin $end
$var wire 1 ~" comp $end
$var wire 1 !# equal $end
$var wire 1 "# less $end
$var wire 2 ## operation [1:0] $end
$var wire 1 $# src1 $end
$var wire 1 %# src2 $end
$var wire 1 &# compare_result $end
$var reg 1 '# _src1 $end
$var reg 1 (# _src2 $end
$var reg 1 )# cout $end
$var reg 1 *# result $end
$var reg 1 +# set $end
$scope module cmp $end
$var wire 3 ,# bonus [2:0] $end
$var wire 1 ~" comp $end
$var wire 1 !# equal $end
$var wire 1 "# less $end
$var reg 1 &# result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$scope module alu $end
$var wire 1 -# A_invert $end
$var wire 1 .# B_invert $end
$var wire 3 /# bonus [2:0] $end
$var wire 1 0# cin $end
$var wire 1 1# comp $end
$var wire 1 2# equal $end
$var wire 1 3# less $end
$var wire 2 4# operation [1:0] $end
$var wire 1 5# src1 $end
$var wire 1 6# src2 $end
$var wire 1 7# compare_result $end
$var reg 1 8# _src1 $end
$var reg 1 9# _src2 $end
$var reg 1 :# cout $end
$var reg 1 ;# result $end
$var reg 1 <# set $end
$scope module cmp $end
$var wire 3 =# bonus [2:0] $end
$var wire 1 1# comp $end
$var wire 1 2# equal $end
$var wire 1 3# less $end
$var reg 1 7# result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$scope module alu $end
$var wire 1 ># A_invert $end
$var wire 1 ?# B_invert $end
$var wire 3 @# bonus [2:0] $end
$var wire 1 A# cin $end
$var wire 1 B# comp $end
$var wire 1 C# equal $end
$var wire 1 D# less $end
$var wire 2 E# operation [1:0] $end
$var wire 1 F# src1 $end
$var wire 1 G# src2 $end
$var wire 1 H# compare_result $end
$var reg 1 I# _src1 $end
$var reg 1 J# _src2 $end
$var reg 1 K# cout $end
$var reg 1 L# result $end
$var reg 1 M# set $end
$scope module cmp $end
$var wire 3 N# bonus [2:0] $end
$var wire 1 B# comp $end
$var wire 1 C# equal $end
$var wire 1 D# less $end
$var reg 1 H# result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$scope module alu $end
$var wire 1 O# A_invert $end
$var wire 1 P# B_invert $end
$var wire 3 Q# bonus [2:0] $end
$var wire 1 R# cin $end
$var wire 1 S# comp $end
$var wire 1 T# equal $end
$var wire 1 U# less $end
$var wire 2 V# operation [1:0] $end
$var wire 1 W# src1 $end
$var wire 1 X# src2 $end
$var wire 1 Y# compare_result $end
$var reg 1 Z# _src1 $end
$var reg 1 [# _src2 $end
$var reg 1 \# cout $end
$var reg 1 ]# result $end
$var reg 1 ^# set $end
$scope module cmp $end
$var wire 3 _# bonus [2:0] $end
$var wire 1 S# comp $end
$var wire 1 T# equal $end
$var wire 1 U# less $end
$var reg 1 Y# result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$scope module alu $end
$var wire 1 `# A_invert $end
$var wire 1 a# B_invert $end
$var wire 3 b# bonus [2:0] $end
$var wire 1 c# cin $end
$var wire 1 d# comp $end
$var wire 1 e# equal $end
$var wire 1 f# less $end
$var wire 2 g# operation [1:0] $end
$var wire 1 h# src1 $end
$var wire 1 i# src2 $end
$var wire 1 j# compare_result $end
$var reg 1 k# _src1 $end
$var reg 1 l# _src2 $end
$var reg 1 m# cout $end
$var reg 1 n# result $end
$var reg 1 o# set $end
$scope module cmp $end
$var wire 3 p# bonus [2:0] $end
$var wire 1 d# comp $end
$var wire 1 e# equal $end
$var wire 1 f# less $end
$var reg 1 j# result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[16] $end
$scope module alu $end
$var wire 1 q# A_invert $end
$var wire 1 r# B_invert $end
$var wire 3 s# bonus [2:0] $end
$var wire 1 t# cin $end
$var wire 1 u# comp $end
$var wire 1 v# equal $end
$var wire 1 w# less $end
$var wire 2 x# operation [1:0] $end
$var wire 1 y# src1 $end
$var wire 1 z# src2 $end
$var wire 1 {# compare_result $end
$var reg 1 |# _src1 $end
$var reg 1 }# _src2 $end
$var reg 1 ~# cout $end
$var reg 1 !$ result $end
$var reg 1 "$ set $end
$scope module cmp $end
$var wire 3 #$ bonus [2:0] $end
$var wire 1 u# comp $end
$var wire 1 v# equal $end
$var wire 1 w# less $end
$var reg 1 {# result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[17] $end
$scope module alu $end
$var wire 1 $$ A_invert $end
$var wire 1 %$ B_invert $end
$var wire 3 &$ bonus [2:0] $end
$var wire 1 '$ cin $end
$var wire 1 ($ comp $end
$var wire 1 )$ equal $end
$var wire 1 *$ less $end
$var wire 2 +$ operation [1:0] $end
$var wire 1 ,$ src1 $end
$var wire 1 -$ src2 $end
$var wire 1 .$ compare_result $end
$var reg 1 /$ _src1 $end
$var reg 1 0$ _src2 $end
$var reg 1 1$ cout $end
$var reg 1 2$ result $end
$var reg 1 3$ set $end
$scope module cmp $end
$var wire 3 4$ bonus [2:0] $end
$var wire 1 ($ comp $end
$var wire 1 )$ equal $end
$var wire 1 *$ less $end
$var reg 1 .$ result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[18] $end
$scope module alu $end
$var wire 1 5$ A_invert $end
$var wire 1 6$ B_invert $end
$var wire 3 7$ bonus [2:0] $end
$var wire 1 8$ cin $end
$var wire 1 9$ comp $end
$var wire 1 :$ equal $end
$var wire 1 ;$ less $end
$var wire 2 <$ operation [1:0] $end
$var wire 1 =$ src1 $end
$var wire 1 >$ src2 $end
$var wire 1 ?$ compare_result $end
$var reg 1 @$ _src1 $end
$var reg 1 A$ _src2 $end
$var reg 1 B$ cout $end
$var reg 1 C$ result $end
$var reg 1 D$ set $end
$scope module cmp $end
$var wire 3 E$ bonus [2:0] $end
$var wire 1 9$ comp $end
$var wire 1 :$ equal $end
$var wire 1 ;$ less $end
$var reg 1 ?$ result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[19] $end
$scope module alu $end
$var wire 1 F$ A_invert $end
$var wire 1 G$ B_invert $end
$var wire 3 H$ bonus [2:0] $end
$var wire 1 I$ cin $end
$var wire 1 J$ comp $end
$var wire 1 K$ equal $end
$var wire 1 L$ less $end
$var wire 2 M$ operation [1:0] $end
$var wire 1 N$ src1 $end
$var wire 1 O$ src2 $end
$var wire 1 P$ compare_result $end
$var reg 1 Q$ _src1 $end
$var reg 1 R$ _src2 $end
$var reg 1 S$ cout $end
$var reg 1 T$ result $end
$var reg 1 U$ set $end
$scope module cmp $end
$var wire 3 V$ bonus [2:0] $end
$var wire 1 J$ comp $end
$var wire 1 K$ equal $end
$var wire 1 L$ less $end
$var reg 1 P$ result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[20] $end
$scope module alu $end
$var wire 1 W$ A_invert $end
$var wire 1 X$ B_invert $end
$var wire 3 Y$ bonus [2:0] $end
$var wire 1 Z$ cin $end
$var wire 1 [$ comp $end
$var wire 1 \$ equal $end
$var wire 1 ]$ less $end
$var wire 2 ^$ operation [1:0] $end
$var wire 1 _$ src1 $end
$var wire 1 `$ src2 $end
$var wire 1 a$ compare_result $end
$var reg 1 b$ _src1 $end
$var reg 1 c$ _src2 $end
$var reg 1 d$ cout $end
$var reg 1 e$ result $end
$var reg 1 f$ set $end
$scope module cmp $end
$var wire 3 g$ bonus [2:0] $end
$var wire 1 [$ comp $end
$var wire 1 \$ equal $end
$var wire 1 ]$ less $end
$var reg 1 a$ result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[21] $end
$scope module alu $end
$var wire 1 h$ A_invert $end
$var wire 1 i$ B_invert $end
$var wire 3 j$ bonus [2:0] $end
$var wire 1 k$ cin $end
$var wire 1 l$ comp $end
$var wire 1 m$ equal $end
$var wire 1 n$ less $end
$var wire 2 o$ operation [1:0] $end
$var wire 1 p$ src1 $end
$var wire 1 q$ src2 $end
$var wire 1 r$ compare_result $end
$var reg 1 s$ _src1 $end
$var reg 1 t$ _src2 $end
$var reg 1 u$ cout $end
$var reg 1 v$ result $end
$var reg 1 w$ set $end
$scope module cmp $end
$var wire 3 x$ bonus [2:0] $end
$var wire 1 l$ comp $end
$var wire 1 m$ equal $end
$var wire 1 n$ less $end
$var reg 1 r$ result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[22] $end
$scope module alu $end
$var wire 1 y$ A_invert $end
$var wire 1 z$ B_invert $end
$var wire 3 {$ bonus [2:0] $end
$var wire 1 |$ cin $end
$var wire 1 }$ comp $end
$var wire 1 ~$ equal $end
$var wire 1 !% less $end
$var wire 2 "% operation [1:0] $end
$var wire 1 #% src1 $end
$var wire 1 $% src2 $end
$var wire 1 %% compare_result $end
$var reg 1 &% _src1 $end
$var reg 1 '% _src2 $end
$var reg 1 (% cout $end
$var reg 1 )% result $end
$var reg 1 *% set $end
$scope module cmp $end
$var wire 3 +% bonus [2:0] $end
$var wire 1 }$ comp $end
$var wire 1 ~$ equal $end
$var wire 1 !% less $end
$var reg 1 %% result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[23] $end
$scope module alu $end
$var wire 1 ,% A_invert $end
$var wire 1 -% B_invert $end
$var wire 3 .% bonus [2:0] $end
$var wire 1 /% cin $end
$var wire 1 0% comp $end
$var wire 1 1% equal $end
$var wire 1 2% less $end
$var wire 2 3% operation [1:0] $end
$var wire 1 4% src1 $end
$var wire 1 5% src2 $end
$var wire 1 6% compare_result $end
$var reg 1 7% _src1 $end
$var reg 1 8% _src2 $end
$var reg 1 9% cout $end
$var reg 1 :% result $end
$var reg 1 ;% set $end
$scope module cmp $end
$var wire 3 <% bonus [2:0] $end
$var wire 1 0% comp $end
$var wire 1 1% equal $end
$var wire 1 2% less $end
$var reg 1 6% result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[24] $end
$scope module alu $end
$var wire 1 =% A_invert $end
$var wire 1 >% B_invert $end
$var wire 3 ?% bonus [2:0] $end
$var wire 1 @% cin $end
$var wire 1 A% comp $end
$var wire 1 B% equal $end
$var wire 1 C% less $end
$var wire 2 D% operation [1:0] $end
$var wire 1 E% src1 $end
$var wire 1 F% src2 $end
$var wire 1 G% compare_result $end
$var reg 1 H% _src1 $end
$var reg 1 I% _src2 $end
$var reg 1 J% cout $end
$var reg 1 K% result $end
$var reg 1 L% set $end
$scope module cmp $end
$var wire 3 M% bonus [2:0] $end
$var wire 1 A% comp $end
$var wire 1 B% equal $end
$var wire 1 C% less $end
$var reg 1 G% result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[25] $end
$scope module alu $end
$var wire 1 N% A_invert $end
$var wire 1 O% B_invert $end
$var wire 3 P% bonus [2:0] $end
$var wire 1 Q% cin $end
$var wire 1 R% comp $end
$var wire 1 S% equal $end
$var wire 1 T% less $end
$var wire 2 U% operation [1:0] $end
$var wire 1 V% src1 $end
$var wire 1 W% src2 $end
$var wire 1 X% compare_result $end
$var reg 1 Y% _src1 $end
$var reg 1 Z% _src2 $end
$var reg 1 [% cout $end
$var reg 1 \% result $end
$var reg 1 ]% set $end
$scope module cmp $end
$var wire 3 ^% bonus [2:0] $end
$var wire 1 R% comp $end
$var wire 1 S% equal $end
$var wire 1 T% less $end
$var reg 1 X% result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[26] $end
$scope module alu $end
$var wire 1 _% A_invert $end
$var wire 1 `% B_invert $end
$var wire 3 a% bonus [2:0] $end
$var wire 1 b% cin $end
$var wire 1 c% comp $end
$var wire 1 d% equal $end
$var wire 1 e% less $end
$var wire 2 f% operation [1:0] $end
$var wire 1 g% src1 $end
$var wire 1 h% src2 $end
$var wire 1 i% compare_result $end
$var reg 1 j% _src1 $end
$var reg 1 k% _src2 $end
$var reg 1 l% cout $end
$var reg 1 m% result $end
$var reg 1 n% set $end
$scope module cmp $end
$var wire 3 o% bonus [2:0] $end
$var wire 1 c% comp $end
$var wire 1 d% equal $end
$var wire 1 e% less $end
$var reg 1 i% result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[27] $end
$scope module alu $end
$var wire 1 p% A_invert $end
$var wire 1 q% B_invert $end
$var wire 3 r% bonus [2:0] $end
$var wire 1 s% cin $end
$var wire 1 t% comp $end
$var wire 1 u% equal $end
$var wire 1 v% less $end
$var wire 2 w% operation [1:0] $end
$var wire 1 x% src1 $end
$var wire 1 y% src2 $end
$var wire 1 z% compare_result $end
$var reg 1 {% _src1 $end
$var reg 1 |% _src2 $end
$var reg 1 }% cout $end
$var reg 1 ~% result $end
$var reg 1 !& set $end
$scope module cmp $end
$var wire 3 "& bonus [2:0] $end
$var wire 1 t% comp $end
$var wire 1 u% equal $end
$var wire 1 v% less $end
$var reg 1 z% result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[28] $end
$scope module alu $end
$var wire 1 #& A_invert $end
$var wire 1 $& B_invert $end
$var wire 3 %& bonus [2:0] $end
$var wire 1 && cin $end
$var wire 1 '& comp $end
$var wire 1 (& equal $end
$var wire 1 )& less $end
$var wire 2 *& operation [1:0] $end
$var wire 1 +& src1 $end
$var wire 1 ,& src2 $end
$var wire 1 -& compare_result $end
$var reg 1 .& _src1 $end
$var reg 1 /& _src2 $end
$var reg 1 0& cout $end
$var reg 1 1& result $end
$var reg 1 2& set $end
$scope module cmp $end
$var wire 3 3& bonus [2:0] $end
$var wire 1 '& comp $end
$var wire 1 (& equal $end
$var wire 1 )& less $end
$var reg 1 -& result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[29] $end
$scope module alu $end
$var wire 1 4& A_invert $end
$var wire 1 5& B_invert $end
$var wire 3 6& bonus [2:0] $end
$var wire 1 7& cin $end
$var wire 1 8& comp $end
$var wire 1 9& equal $end
$var wire 1 :& less $end
$var wire 2 ;& operation [1:0] $end
$var wire 1 <& src1 $end
$var wire 1 =& src2 $end
$var wire 1 >& compare_result $end
$var reg 1 ?& _src1 $end
$var reg 1 @& _src2 $end
$var reg 1 A& cout $end
$var reg 1 B& result $end
$var reg 1 C& set $end
$scope module cmp $end
$var wire 3 D& bonus [2:0] $end
$var wire 1 8& comp $end
$var wire 1 9& equal $end
$var wire 1 :& less $end
$var reg 1 >& result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[30] $end
$scope module alu $end
$var wire 1 E& A_invert $end
$var wire 1 F& B_invert $end
$var wire 3 G& bonus [2:0] $end
$var wire 1 H& cin $end
$var wire 1 I& comp $end
$var wire 1 J& equal $end
$var wire 1 K& less $end
$var wire 2 L& operation [1:0] $end
$var wire 1 M& src1 $end
$var wire 1 N& src2 $end
$var wire 1 O& compare_result $end
$var reg 1 P& _src1 $end
$var reg 1 Q& _src2 $end
$var reg 1 R& cout $end
$var reg 1 S& result $end
$var reg 1 T& set $end
$scope module cmp $end
$var wire 3 U& bonus [2:0] $end
$var wire 1 I& comp $end
$var wire 1 J& equal $end
$var wire 1 K& less $end
$var reg 1 O& result $end
$upscope $end
$upscope $end
$upscope $end
$scope begin genblk1[31] $end
$scope module alu $end
$var wire 1 V& A_invert $end
$var wire 1 W& B_invert $end
$var wire 3 X& bonus [2:0] $end
$var wire 1 Y& cin $end
$var wire 1 Z& comp $end
$var wire 1 [& equal $end
$var wire 1 \& less $end
$var wire 2 ]& operation [1:0] $end
$var wire 1 ^& src1 $end
$var wire 1 _& src2 $end
$var wire 1 `& compare_result $end
$var reg 1 a& _src1 $end
$var reg 1 b& _src2 $end
$var reg 1 c& cout $end
$var reg 1 d& result $end
$var reg 1 e& set $end
$scope module cmp $end
$var wire 3 f& bonus [2:0] $end
$var wire 1 Z& comp $end
$var wire 1 [& equal $end
$var wire 1 \& less $end
$var reg 1 `& result $end
$upscope $end
$upscope $end
$upscope $end
$scope module first_alu $end
$var wire 1 g& A_invert $end
$var wire 1 h& B_invert $end
$var wire 3 i& bonus [2:0] $end
$var wire 1 j& cin $end
$var wire 1 k& comp $end
$var wire 1 # equal $end
$var wire 1 $ less $end
$var wire 2 l& operation [1:0] $end
$var wire 1 m& src1 $end
$var wire 1 n& src2 $end
$var wire 1 o& compare_result $end
$var reg 1 p& _src1 $end
$var reg 1 q& _src2 $end
$var reg 1 r& cout $end
$var reg 1 s& result $end
$var reg 1 t& set $end
$scope module cmp $end
$var wire 3 u& bonus [2:0] $end
$var wire 1 k& comp $end
$var wire 1 # equal $end
$var wire 1 $ less $end
$var reg 1 o& result $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 u&
0t&
0s&
0r&
0q&
0p&
0o&
0n&
0m&
b0 l&
1k&
0j&
b0 i&
0h&
0g&
b0 f&
0e&
0d&
0c&
0b&
0a&
0`&
0_&
0^&
b0 ]&
0\&
0[&
0Z&
0Y&
b0 X&
0W&
0V&
b0 U&
0T&
0S&
0R&
0Q&
0P&
0O&
0N&
0M&
b0 L&
0K&
0J&
0I&
0H&
b0 G&
0F&
0E&
b0 D&
0C&
0B&
0A&
0@&
0?&
0>&
0=&
0<&
b0 ;&
0:&
09&
08&
07&
b0 6&
05&
04&
b0 3&
02&
01&
00&
0/&
0.&
0-&
0,&
0+&
b0 *&
0)&
0(&
0'&
0&&
b0 %&
0$&
0#&
b0 "&
0!&
0~%
0}%
0|%
0{%
0z%
0y%
0x%
b0 w%
0v%
0u%
0t%
0s%
b0 r%
0q%
0p%
b0 o%
0n%
0m%
0l%
0k%
0j%
0i%
0h%
0g%
b0 f%
0e%
0d%
0c%
0b%
b0 a%
0`%
0_%
b0 ^%
0]%
0\%
0[%
0Z%
0Y%
0X%
0W%
0V%
b0 U%
0T%
0S%
0R%
0Q%
b0 P%
0O%
0N%
b0 M%
0L%
0K%
0J%
0I%
0H%
0G%
0F%
0E%
b0 D%
0C%
0B%
0A%
0@%
b0 ?%
0>%
0=%
b0 <%
0;%
0:%
09%
08%
07%
06%
05%
04%
b0 3%
02%
01%
00%
0/%
b0 .%
0-%
0,%
b0 +%
0*%
0)%
0(%
0'%
0&%
0%%
0$%
0#%
b0 "%
0!%
0~$
0}$
0|$
b0 {$
0z$
0y$
b0 x$
0w$
0v$
0u$
0t$
0s$
0r$
0q$
0p$
b0 o$
0n$
0m$
0l$
0k$
b0 j$
0i$
0h$
b0 g$
0f$
0e$
0d$
0c$
0b$
0a$
0`$
0_$
b0 ^$
0]$
0\$
0[$
0Z$
b0 Y$
0X$
0W$
b0 V$
0U$
0T$
0S$
0R$
0Q$
0P$
0O$
0N$
b0 M$
0L$
0K$
0J$
0I$
b0 H$
0G$
0F$
b0 E$
0D$
0C$
0B$
0A$
0@$
0?$
0>$
0=$
b0 <$
0;$
0:$
09$
08$
b0 7$
06$
05$
b0 4$
03$
02$
01$
00$
0/$
0.$
0-$
0,$
b0 +$
0*$
0)$
0($
0'$
b0 &$
0%$
0$$
b0 #$
0"$
0!$
0~#
0}#
0|#
0{#
0z#
0y#
b0 x#
0w#
0v#
0u#
0t#
b0 s#
0r#
0q#
b0 p#
0o#
0n#
0m#
0l#
0k#
0j#
0i#
0h#
b0 g#
0f#
0e#
0d#
0c#
b0 b#
0a#
0`#
b0 _#
0^#
0]#
0\#
0[#
0Z#
0Y#
0X#
0W#
b0 V#
0U#
0T#
0S#
0R#
b0 Q#
0P#
0O#
b0 N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
b0 E#
0D#
0C#
0B#
0A#
b0 @#
0?#
0>#
b0 =#
0<#
0;#
0:#
09#
08#
07#
06#
05#
b0 4#
03#
02#
01#
00#
b0 /#
0.#
0-#
b0 ,#
0+#
0*#
0)#
0(#
0'#
0&#
0%#
0$#
b0 ##
0"#
0!#
0~"
0}"
b0 |"
0{"
0z"
b0 y"
0x"
0w"
0v"
0u"
0t"
0s"
0r"
0q"
b0 p"
0o"
0n"
0m"
0l"
b0 k"
0j"
0i"
b0 h"
0g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
b0 _"
0^"
0]"
0\"
0["
b0 Z"
0Y"
0X"
b0 W"
0V"
0U"
0T"
0S"
0R"
0Q"
0P"
0O"
b0 N"
0M"
0L"
0K"
0J"
b0 I"
0H"
0G"
b0 F"
0E"
0D"
0C"
0B"
0A"
0@"
0?"
0>"
b0 ="
0<"
0;"
0:"
09"
b0 8"
07"
06"
b0 5"
04"
03"
02"
01"
00"
0/"
0."
0-"
b0 ,"
0+"
0*"
0)"
0("
b0 '"
0&"
0%"
b0 $"
0#"
0""
0!"
0~
0}
0|
0{
0z
b0 y
0x
0w
0v
0u
b0 t
0s
0r
b0 q
0p
0o
0n
0m
0l
0k
0j
0i
b0 h
0g
0f
0e
0d
b0 c
0b
0a
b0 `
0_
0^
0]
0\
0[
0Z
0Y
0X
b0 W
0V
0U
0T
0S
b0 R
0Q
0P
b0 O
0N
0M
0L
0K
0J
0I
0H
0G
b0 F
0E
0D
0C
0B
b0 A
0@
0?
b0 >
0=
0<
0;
0:
09
08
07
06
b0 5
04
03
02
01
b0 0
0/
0.
0-
b0 ,
b0 +
b0 *
1)
b0 (
b0 '
0&
0%
0$
1#
b0 "
b0 !
$end
#100000
1&
#105000
1o&
1$
1N
1_
1p
0o
14"
1E"
1V"
0U"
1x"
1+#
1<#
0;#
1^#
1o#
1"$
0!$
1D$
1U$
1f$
0e$
1*%
1;%
1L%
0K%
1n%
1!&
12&
01&
1T&
1e&
1B
1S
1d
1("
19"
1J"
1l"
1}"
10#
1R#
1c#
1t#
18$
1I$
1Z$
1|$
1/%
1@%
1b%
1s%
1&&
1H&
1Y&
0#
1<
1;
1:
19
1M
1L
1K
1J
1^
1]
1\
1[
1""
1!"
1~
1}
13"
12"
11"
10"
1D"
1C"
1B"
1A"
1f"
1e"
1d"
1c"
1w"
1v"
1u"
1t"
1*#
1)#
1(#
1'#
1L#
1K#
1J#
1I#
1]#
1\#
1[#
1Z#
1n#
1m#
1l#
1k#
12$
11$
10$
1/$
1C$
1B$
1A$
1@$
1T$
1S$
1R$
1Q$
1v$
1u$
1t$
1s$
1)%
1(%
1'%
1&%
1:%
19%
18%
17%
1\%
1[%
1Z%
1Y%
1m%
1l%
1k%
1j%
1~%
1}%
1|%
1{%
1B&
1A&
1@&
1?&
1S&
1R&
1Q&
1P&
1d&
b11101110111011101110111011101110 *
1c&
1b&
1a&
0m
0l
0S"
0R"
09#
08#
0}#
0|#
0c$
0b$
0I%
0H%
0/&
0.&
b11011101110111011101110111011101 +
1t&
0)
b11101110111011101110111011101110 ,
0s&
0q&
0p&
1.
1/
b1 5
1?
1@
b1 F
1P
1Q
b1 W
1a
1b
b1 h
1r
1s
b1 y
1%"
1&"
b1 ,"
16"
17"
b1 ="
1G"
1H"
b1 N"
1X"
1Y"
b1 _"
1i"
1j"
b1 p"
1z"
1{"
b1 ##
1-#
1.#
b1 4#
1>#
1?#
b1 E#
1O#
1P#
b1 V#
1`#
1a#
b1 g#
1q#
1r#
b1 x#
1$$
1%$
b1 +$
15$
16$
b1 <$
1F$
1G$
b1 M$
1W$
1X$
b1 ^$
1h$
1i$
b1 o$
1y$
1z$
b1 "%
1,%
1-%
b1 3%
1=%
1>%
b1 D%
1N%
1O%
b1 U%
1_%
1`%
b1 f%
1p%
1q%
b1 w%
1#&
1$&
b1 *&
14&
15&
b1 ;&
1E&
1F&
b1 L&
1V&
1W&
b1 ]&
1g&
1h&
1j&
b1 l&
1j
1P"
16#
1z#
1`$
1F%
1,&
1n&
1i
1O"
15#
1y#
1_$
1E%
1+&
1m&
b1101 !
b10001000100010001000100010001 (
b10001000100010001000100010001 '
#115000
0o
0U"
0;#
0!$
0e$
0K%
01&
0d
0J"
00#
0t#
0Z$
0@%
0&&
0]
0C"
0)#
0m#
0S$
09%
0}%
0%
0c&
0S
09"
0}"
0c#
0I$
0/%
0s%
0Y&
1o&
0L
02"
0v"
0\#
0B$
0(%
0l%
0R&
1$
0B
0("
0l"
0R#
0'$
0k$
0Q%
07&
0u
0["
0A#
08$
0|$
0b%
0H&
1)
0<
1=
0;
09
1N
0M
0J
1_
0^
0[
0""
1#"
0!"
0}
14"
03"
00"
1E"
0D"
0A"
0f"
1g"
0e"
0c"
1x"
0w"
0t"
1+#
0*#
0'#
0L#
1M#
0K#
0I#
1^#
0]#
0Z#
1o#
0n#
0k#
1"$
0~#
1|#
1f$
0d$
1b$
1L%
0J%
1H%
12&
00&
1.&
1p
0n
1m
1V"
0T"
1S"
1<#
0:#
19#
02$
13$
01$
00$
1D$
0C$
0A$
1U$
0T$
0R$
0v$
1w$
0u$
0t$
1*%
0)%
0'%
1;%
0:%
08%
0\%
1]%
0[%
0Z%
1n%
0m%
0k%
1!&
0~%
0|%
0B&
1C&
b0 *
0A&
0@&
1T&
0S&
0Q&
b11111111111111111111111111111111 +
1e&
0d&
0b&
b0 ,
0s&
1q&
0.
0/
b0 5
0?
0@
b0 F
0P
0Q
b0 W
0a
0b
b0 h
0r
0s
b0 y
0%"
0&"
b0 ,"
06"
07"
b0 ="
0G"
0H"
b0 N"
0X"
0Y"
b0 _"
0i"
0j"
b0 p"
0z"
0{"
b0 ##
0-#
0.#
b0 4#
0>#
0?#
b0 E#
0O#
0P#
b0 V#
0`#
0a#
b0 g#
0q#
0r#
b0 x#
0$$
0%$
b0 +$
05$
06$
b0 <$
0F$
0G$
b0 M$
0W$
0X$
b0 ^$
0h$
0i$
b0 o$
0y$
0z$
b0 "%
0,%
0-%
b0 3%
0=%
0>%
b0 D%
0N%
0O%
b0 U%
0_%
0`%
b0 f%
0p%
0q%
b0 w%
0#&
0$&
b0 *&
04&
05&
b0 ;&
0E&
0F&
b0 L&
0V&
0W&
b0 ]&
0g&
0h&
0j&
b0 l&
17
1H
1Y
1{
1."
1?"
1a"
1r"
1%#
1G#
1X#
1i#
0z#
0`$
0F%
0,&
0i
0O"
05#
1,$
1=$
1N$
1p$
1#%
14%
1V%
1g%
1x%
1<&
1M&
1^&
0m&
b0 !
b1111111111111111 (
b11111111111111110000000000000000 '
#125000
0v$
1k$
0f$
1d$
1Z$
1'$
0U$
1S$
0w"
0"$
1~#
1I$
1l"
1t#
0o&
0D$
1B$
0""
0g"
1e"
0o#
1m#
0$
18$
1u
1["
1c#
1M
13"
1*#
1!$
1e$
1K%
11&
1B&
0=
0:
1#"
0~
1x"
0u"
0<#
09#
0M#
0J#
12$
13$
11$
10$
0t&
0q&
1^
0\
1[
1o
0p
1n
1l
1D"
0B"
1A"
1U"
0V"
1T"
1R"
1f"
0d"
1c"
1]#
0^#
b111111100001100010000 *
1\#
1Z#
1n#
0l#
1k#
1C$
1A$
0@$
1T$
1R$
0Q$
1w$
0s$
0*%
0&%
1:%
18%
07%
0]%
0Y%
0n%
0j%
0)
b111001100111111100101111011100 ,
1~%
1|%
0{%
0T&
0P&
b111001101000100000110011101100 +
0e&
0a&
b1 5
b1 F
b1 W
b1 h
b1 y
b1 ,"
b1 ="
b1 N"
b1 _"
b1 p"
b1 ##
b1 4#
b1 E#
b1 V#
b1 g#
b1 x#
b1 +$
b1 <$
b1 M$
b1 ^$
b1 o$
b1 "%
b1 3%
b1 D%
b1 U%
b1 f%
b1 w%
b1 *&
b1 ;&
b1 L&
b1 ]&
b1 l&
07
0Y
0{
0?"
0a"
0r"
06#
0G#
0i#
1-$
1>$
1O$
15%
1y%
0n&
1X
1i
1>"
1O"
1`"
1W#
1h#
0=$
0N$
0p$
0#%
04%
0V%
0g%
0x%
0M&
0^&
b1 !
b1000100011100100100101010100 (
b110001000100111100001110011000 '
#135000
1#
1)
1-
0%
1c&
1Y&
1R&
1H&
0C&
1A&
0B&
17&
0v$
02&
10&
01&
1k$
1&&
0f$
1d$
0!&
1}%
0~%
1Z$
1s%
0U$
1S$
1l%
1I$
1b%
0D$
1B$
0]#
1[%
0o
18$
1R#
1Q%
1d
11$
0U"
1K#
0L%
1J%
0K%
0_
1]
0^
1'$
1J"
1A#
1@%
1S
0w"
0"$
1~#
0E"
1C"
0D"
1:#
0;%
19%
0:%
0N
1L
0M
1l"
1t#
19"
10#
1/%
0o&
1B
0""
0g"
1e"
0o#
1m#
04"
12"
03"
0+#
1)#
0*#
1(%
0$
1;
1u
1["
1c#
1("
1}"
1|$
11
0f"
0n#
0!$
0e$
0p
1n
0m
0V"
1T"
0S"
0^#
1\#
0[#
03$
02$
00$
0=
0<
19
0K
1J
0#"
1!"
1}
01"
10"
0x"
1v"
1t"
0(#
1'#
0<#
0;#
18#
0M#
0L#
1I#
0C$
0A$
1@$
0T$
0R$
1Q$
0w$
1u$
1s$
0*%
0)%
1&%
08%
17%
0]%
0\%
1Y%
0n%
0m%
1j%
0|%
1{%
0T&
0S&
1P&
b0 +
0e&
b0 ,
0d&
1a&
b11111111111111111111111111111111 *
1r&
1q&
1p&
b10 5
b10 F
b10 W
b10 h
b10 y
b10 ,"
b10 ="
b10 N"
b10 _"
b10 p"
b10 ##
b10 4#
b10 E#
b10 V#
b10 g#
b10 x#
b10 +$
b10 <$
b10 M$
b10 ^$
b10 o$
b10 "%
b10 3%
b10 D%
b10 U%
b10 f%
b10 w%
b10 *&
b10 ;&
b10 L&
b10 ]&
b10 l&
0H
0j
0."
0P"
0%#
0X#
0-$
0>$
0O$
05%
0y%
1n&
16
1G
1z
1-"
1q"
1$#
15#
1F#
1=$
1N$
1p$
1#%
14%
1V%
1g%
1x%
1M&
1^&
1m&
b10 !
b1 (
b11111111111111111111111111111111 '
#145000
0("
1#"
0!"
1""
0u
0t#
0I$
1p
0n
1o
1o#
0m#
1n#
1D$
0B$
1C$
0d
0["
0}"
0c#
08$
1_
0]
1^
1V"
0T"
1U"
1x"
0v"
1w"
1^#
0\#
1]#
13$
01$
12$
0S
09"
0J"
0l"
00#
0R#
0#
0'$
1=
1<
1:
0<#
0;#
19#
0U$
0T$
1R$
1f$
1e$
1c$
12&
11&
1/&
1T&
1S&
1Q&
0q&
0~
0[#
00$
0'%
08%
0Z%
0k%
0|%
0@&
1N
0L
1M
0K
0J
1\
0[
1m
0l
04"
02"
03"
01"
00"
0E"
0C"
0D"
0B"
0A"
1S"
0R"
0g"
0e"
0f"
0d"
0c"
1u"
0t"
0+#
0)#
0*#
0(#
0'#
1M#
0K#
1L#
0J#
0I#
1l#
0k#
b1010000000101101110010100111110 +
0"$
b11111111111110000001000000000011 *
0~#
0)
b1010000000101101110010100111110 ,
0!$
0}#
0|#
1A$
0@$
1t$
0s$
1I%
0H%
1b&
0a&
1/
1@
1Q
1b
1s
1&"
17"
1H"
1Y"
1j"
1{"
1.#
1?#
1P#
1a#
1r#
1%$
16$
1G$
1X$
1i$
1z$
1-%
1>%
1O%
1`%
1q%
1$&
15&
1F&
1W&
1h&
1j&
1H
1{
1."
1?"
1a"
1%#
1G#
1X#
1z#
1-$
1$%
15%
1W%
1h%
1y%
1=&
0G
0X
0i
0-"
0>"
0O"
0`"
0q"
0$#
0F#
0h#
0y#
0=$
0p$
0E%
0^&
b110 !
b101110110000110110101011100101 (
b1111110110110100101000000100011 '
#155000
1s&
1o&
14"
03"
1E"
0D"
1g"
0f"
1+#
0*#
1<#
0;#
1"$
0!$
1U$
0T$
1$
1("
1c#
18$
1S
1d
1u
19"
1J"
1["
1l"
1}"
10#
1R#
1t#
1'$
1I$
0)
0<
1:
19#
1R$
0e$
1c$
01&
1/&
0S&
1Q&
0q&
0-
1#"
1!"
0""
1~
1^#
1\#
0]#
1[#
13$
11$
02$
10$
1*%
0)%
1'%
1;%
0:%
18%
1]%
0\%
1Z%
1n%
0m%
1k%
1!&
0~%
1|%
1C&
0B&
1@&
0M
1L
1K
1J
1_
1]
0^
1\
1[
1p
1n
0o
1m
1l
12"
11"
10"
1C"
1B"
1A"
1V"
1T"
0U"
1S"
1R"
1e"
1d"
1c"
1x"
1v"
0w"
1u"
1t"
1)#
1(#
1'#
0L#
1K#
1J#
1I#
1o#
1m#
0n#
1l#
1k#
1~#
1}#
1|#
1D$
b11111111111111111111111111111111 *
1B$
0C$
1A$
1@$
1w$
0v$
1t$
1s$
1L%
0K%
1I%
1H%
b11111111111111111111111111111110 +
1e&
b1 ,
0d&
1b&
1a&
b11 5
b11 F
b11 W
b11 h
b11 y
b11 ,"
b11 ="
b11 N"
b11 _"
b11 p"
b11 ##
b11 4#
b11 E#
b11 V#
b11 g#
b11 x#
b11 +$
b11 <$
b11 M$
b11 ^$
b11 o$
b11 "%
b11 3%
b11 D%
b11 U%
b11 f%
b11 w%
b11 *&
b11 ;&
b11 L&
b11 ]&
b11 l&
0H
0{
0."
0?"
0a"
0%#
0G#
0X#
0z#
0-$
0$%
05%
0W%
0h%
0y%
0=&
1G
1X
1i
1-"
1>"
1O"
1`"
1q"
1$#
1F#
1h#
1y#
1=$
1p$
1E%
1^&
b111 !
b1 (
b11111111111111111111111111111111 '
#165000
1<
1:
19
1M
1K
1J
1^
1\
1[
1o
1m
1l
1""
1~
1}
13"
11"
10"
1D"
1B"
1A"
1U"
1S"
1R"
1f"
1d"
1c"
1w"
1u"
1t"
1*#
1(#
1'#
1;#
19#
18#
1L#
1J#
1I#
1]#
1[#
1Z#
1n#
1l#
1k#
1!$
1}#
1|#
12$
10$
1/$
1C$
1A$
1@$
1T$
1R$
1Q$
1e$
1c$
1b$
1v$
1t$
1s$
1)%
1'%
1&%
1:%
18%
17%
1K%
1I%
1H%
1\%
1Z%
1Y%
1m%
1k%
1j%
1~%
1|%
1{%
11&
1/&
1.&
1B&
1@&
1?&
1S&
1Q&
1P&
b11111111111111111111111111111111 ,
1d&
1b&
1a&
b11111111111111111111111111111111 +
1t&
1q&
1p&
1.
b0 5
1?
b0 F
1P
b0 W
1a
b0 h
1r
b0 y
1%"
b0 ,"
16"
b0 ="
1G"
b0 N"
1X"
b0 _"
1i"
b0 p"
1z"
b0 ##
1-#
b0 4#
1>#
b0 E#
1O#
b0 V#
1`#
b0 g#
1q#
b0 x#
1$$
b0 +$
15$
b0 <$
1F$
b0 M$
1W$
b0 ^$
1h$
b0 o$
1y$
b0 "%
1,%
b0 3%
1=%
b0 D%
1N%
b0 U%
1_%
b0 f%
1p%
b0 w%
1#&
b0 *&
14&
b0 ;&
1E&
b0 L&
1V&
b0 ]&
1g&
b0 l&
0n&
06
0G
0X
0i
0z
0-"
0>"
0O"
0`"
0q"
0$#
05#
0F#
0W#
0h#
0y#
0,$
0=$
0N$
0_$
0p$
0#%
04%
0E%
0V%
0g%
0x%
0+&
0<&
0M&
0^&
0m&
b1100 !
b0 (
b0 '
#175000
0$
1#
0N
0)
0M
1K
0J
0_
0^
1\
0[
0#"
0""
1~
0}
04"
03"
11"
00"
0E"
0D"
1B"
0A"
0V"
0U"
1S"
0R"
0g"
0f"
1d"
0c"
0+#
0*#
1(#
0'#
0^#
0]#
1[#
0Z#
0o#
0n#
1l#
0k#
0"$
0!$
1}#
0|#
0U$
0T$
1R$
0Q$
0w$
0v$
1t$
0s$
0;%
0:%
18%
07%
0L%
0K%
1I%
0H%
0]%
0\%
1Z%
0Y%
0n%
0m%
1k%
0j%
0e&
0d&
1b&
0a&
0t&
1s&
1q&
0p&
0=
0<
0:
0p
0o
0m
0x"
0w"
0u"
0<#
0;#
09#
0M#
0L#
0J#
03$
02$
00$
0D$
0C$
0A$
0f$
0e$
0c$
0*%
0)%
0'%
0!&
0~%
0|%
02&
01&
0/&
0C&
0B&
0@&
b0 +
0T&
b1 ,
0S&
0Q&
1o&
0.
b11 5
0?
b11 F
0P
b11 W
0a
b11 h
0r
b11 y
0%"
b11 ,"
06"
b11 ="
0G"
b11 N"
0X"
b11 _"
0i"
b11 p"
0z"
b11 ##
0-#
b11 4#
0>#
b11 E#
0O#
b11 V#
0`#
b11 g#
0q#
b11 x#
0$$
b11 +$
05$
b11 <$
0F$
b11 M$
0W$
b11 ^$
0h$
b11 o$
0y$
b11 "%
0,%
b11 3%
0=%
b11 D%
0N%
b11 U%
0_%
b11 f%
0p%
b11 w%
0#&
b11 *&
04&
b11 ;&
0E&
b11 L&
0V&
b11 ]&
0g&
b11 l&
17
1j
1r"
16#
1G#
1-$
1>$
1`$
1$%
1y%
1,&
1=&
1N&
16
1i
1q"
15#
1F#
1,$
1=$
1_$
1#%
1x%
1+&
1<&
1M&
b110 "
b110 0
b110 >
b110 A
b110 O
b110 R
b110 `
b110 c
b110 q
b110 t
b110 $"
b110 '"
b110 5"
b110 8"
b110 F"
b110 I"
b110 W"
b110 Z"
b110 h"
b110 k"
b110 y"
b110 |"
b110 ,#
b110 /#
b110 =#
b110 @#
b110 N#
b110 Q#
b110 _#
b110 b#
b110 p#
b110 s#
b110 #$
b110 &$
b110 4$
b110 7$
b110 E$
b110 H$
b110 V$
b110 Y$
b110 g$
b110 j$
b110 x$
b110 {$
b110 +%
b110 .%
b110 <%
b110 ?%
b110 M%
b110 P%
b110 ^%
b110 a%
b110 o%
b110 r%
b110 "&
b110 %&
b110 3&
b110 6&
b110 D&
b110 G&
b110 U&
b110 X&
b110 f&
b110 i&
b110 u&
b111 !
b1111000010101100011010000010010 (
b1111000010101100011010000010010 '
#185000
09"
0'$
0|$
14"
02"
03"
1"$
0~#
0!$
1w$
0u$
0v$
0("
0J"
0["
0l"
0t#
0k$
0#
0:
1K
0m
09#
0J#
1[#
1}#
0A$
0/&
0@&
0Q&
1b&
1#"
0!"
0""
0~
0E"
0C"
0D"
0B"
0V"
0T"
0U"
0S"
0g"
0e"
0f"
0d"
0x"
0w"
1u"
1o#
0m#
0n#
0l#
03$
02$
10$
0*%
0)%
1'%
1!&
0~%
1|%
0\
1[
01"
10"
0(#
1'#
0R$
1Q$
1f$
b11111111110011100111110000011111 *
0d$
0e$
0c$
0b$
0t$
1s$
08%
17%
0I%
1H%
1]%
0\%
1Z%
1Y%
1n%
b1 ,
0m%
1k%
1j%
b1110001100011000000001100001 +
1t&
1q&
1p&
08
0I
0Z
0k
0|
0/"
0@"
0Q"
0b"
0s"
0&#
07#
0H#
0Y#
0j#
0{#
0.$
0?$
0P$
0a$
0r$
0%%
06%
0G%
0X%
0i%
0z%
0-&
0>&
0O&
0`&
1Y
1{
1."
1?"
1P"
1a"
0r"
1%#
1i#
0-$
1O$
1q$
0$%
15%
1F%
0y%
1X
1-"
1$#
1N$
0_$
1p$
14%
1E%
1V%
1g%
1m&
b11 "
b11 0
b11 >
b11 A
b11 O
b11 R
b11 `
b11 c
b11 q
b11 t
b11 $"
b11 '"
b11 5"
b11 8"
b11 F"
b11 I"
b11 W"
b11 Z"
b11 h"
b11 k"
b11 y"
b11 |"
b11 ,#
b11 /#
b11 =#
b11 @#
b11 N#
b11 Q#
b11 _#
b11 b#
b11 p#
b11 s#
b11 #$
b11 &$
b11 4$
b11 7$
b11 E$
b11 H$
b11 V$
b11 Y$
b11 g$
b11 j$
b11 x$
b11 {$
b11 +%
b11 .%
b11 <%
b11 ?%
b11 M%
b11 P%
b11 ^%
b11 a%
b11 o%
b11 r%
b11 "&
b11 %&
b11 3&
b11 6&
b11 D&
b11 G&
b11 U&
b11 X&
b11 f&
b11 i&
b11 u&
b1110001101111001011101111111010 (
b1111111111011100011110001011011 '
#195000
1]%
1V"
0U"
1A#
1Q%
1J"
0<#
1:#
0;#
0L%
1J%
0K%
1C"
0n#
10#
1@%
19"
1l"
0c#
1|$
0+#
1)#
0*#
0!$
0;%
19%
0:%
04"
12"
01"
1e"
1^#
0\#
0]#
1[#
0f$
0w$
1u$
0t$
0n%
0!&
1|%
1}"
0t#
1/%
0d
1("
1["
0R#
0Z$
1k$
0b%
0s%
1)
0s&
1q&
1=
0<
1:
0p
0o
1m
0x"
1v"
0w"
0u"
1o#
0m#
1l#
0"$
0}#
0*%
1(%
0)%
0'%
12&
01&
1/&
1C&
0B&
1@&
1T&
0S&
1Q&
1N
0M
1K
1J
1_
0]
0^
0\
0[
0#"
1!"
0~
1}
0E"
0D"
0B"
1A"
1T"
1S"
1R"
0g"
0f"
0d"
1c"
1(#
0'#
19#
08#
1M#
0K#
0L#
0J#
0I#
1A$
0@$
b1110010000010001110000100001111 +
1U$
0S$
0T$
0R$
0Q$
1d$
0e$
1c$
1b$
18%
07%
1I%
0H%
0[%
0\%
0Z%
0Y%
b11111001111101100001111111110111 *
0l%
b0 ,
0m%
0k%
0j%
0o&
07
0j
0P"
1r"
0%#
06#
0i#
1z#
0>$
0`$
1$%
05%
0F%
1W%
1h%
0,&
0=&
0N&
1G
0X
1z
1>"
1O"
1`"
0$#
05#
0F#
0=$
0N$
1_$
04%
0E%
0V%
0g%
b10 "
b10 0
b10 >
b10 A
b10 O
b10 R
b10 `
b10 c
b10 q
b10 t
b10 $"
b10 '"
b10 5"
b10 8"
b10 F"
b10 I"
b10 W"
b10 Z"
b10 h"
b10 k"
b10 y"
b10 |"
b10 ,#
b10 /#
b10 =#
b10 @#
b10 N#
b10 Q#
b10 _#
b10 b#
b10 p#
b10 s#
b10 #$
b10 &$
b10 4$
b10 7$
b10 E$
b10 H$
b10 V$
b10 Y$
b10 g$
b10 j$
b10 x$
b10 {$
b10 +%
b10 .%
b10 <%
b10 ?%
b10 M%
b10 P%
b10 ^%
b10 a%
b10 o%
b10 r%
b10 "&
b10 %&
b10 3&
b10 6&
b10 D&
b10 G&
b10 U&
b10 X&
b10 f&
b10 i&
b10 u&
b110011010010010011011101000 (
b1111000011100100000011111110111 '
#205000
0l"
1g"
0e"
0f"
0["
0T"
0U"
0T&
0J"
1'$
0H&
0\%
1E"
0C"
0D"
1~#
0T$
0A&
0B&
0N
0Q%
09"
1t#
1I$
0s%
07&
0B
0M#
1L%
0J%
0K%
0_
1p
0o
14"
02"
03"
0]#
0o#
1m#
0D$
1B$
0C$
0l%
00&
01&
0;
0<
0A#
1Z$
0@%
0S
1d
0("
1R#
1c#
18$
1k$
0b%
0&&
01
1m
01"
0d"
1A$
0'%
0S&
1Q&
1b&
1=
0:
0x"
0w"
1u"
1<#
0:#
0;#
09#
0"$
0!$
1}#
0U$
1S$
1R$
1w$
0v$
1t$
1;%
09%
0:%
08%
0L
0M
0K
0J
1]
0^
1\
1[
1#"
0!"
0""
0~
0}
1B"
0A"
1V"
1S"
0R"
1+#
0*#
1(#
1'#
1K#
0L#
1J#
1I#
1^#
1\#
1[#
1Z#
0n#
0l#
1k#
03$
11$
02$
10$
0/$
0f$
1d$
0e$
1c$
0b$
0I%
1H%
1]%
0[%
0Z%
1Y%
1n%
0m%
0k%
1j%
1!&
0}%
0~%
1|%
0{%
12&
1/&
0.&
b111111101000000101101111110011 +
1C&
1@&
0?&
b11000000011111111110110000011000 *
0r&
0)
b1 ,
1s&
0q&
0p&
1o&
08
0I
0Z
0k
0|
0/"
0@"
0Q"
0b"
0s"
0&#
07#
0H#
0Y#
0j#
0{#
0.$
0?$
0P$
0a$
0r$
0%%
06%
0G%
0X%
0i%
0z%
0-&
0>&
0O&
0`&
17
1H
0Y
0?"
0r"
16#
0G#
1i#
0z#
0O$
0q$
15%
1F%
1n&
0G
1X
0z
0>"
0O"
1$#
1F#
1W#
1h#
0,$
0_$
1E%
1V%
1g%
0x%
0+&
0<&
0m&
b1 "
b1 0
b1 >
b1 A
b1 O
b1 R
b1 `
b1 c
b1 q
b1 t
b1 $"
b1 '"
b1 5"
b1 8"
b1 F"
b1 I"
b1 W"
b1 Z"
b1 h"
b1 k"
b1 y"
b1 |"
b1 ,#
b1 /#
b1 =#
b1 @#
b1 N#
b1 Q#
b1 _#
b1 b#
b1 p#
b1 s#
b1 #$
b1 &$
b1 4$
b1 7$
b1 E$
b1 H$
b1 V$
b1 Y$
b1 g$
b1 j$
b1 x$
b1 {$
b1 +%
b1 .%
b1 <%
b1 ?%
b1 M%
b1 P%
b1 ^%
b1 a%
b1 o%
b1 r%
b1 "&
b1 %&
b1 3&
b1 6&
b1 D&
b1 G&
b1 U&
b1 X&
b1 f&
b1 i&
b1 u&
b111110000001001001001100111 (
b1000111011000001110111001011010 '
#215000
0o&
1#
0:%
1/%
0*%
1(%
0)%
1|$
1u$
0v$
1k$
0f$
1d$
0e$
1H&
1Z$
0C&
1A&
0U$
1S$
0T$
17&
1I$
02&
10&
0D$
1B$
0C$
1l"
1&&
18$
0g"
1e"
0!&
1}%
03$
11$
02$
1["
1s%
1'$
0V"
1T"
0n%
1l%
0"$
1~#
0!$
1J"
1b%
1t#
0$
1S
0E"
1C"
0]%
1[%
0""
0;#
0o#
1m#
0n#
1L
19"
1Q%
1u
10#
1c#
1B
04"
12"
0L%
1J%
1n
0o
1)#
0*#
1\#
0]#
0%
0e&
1c&
0d&
0=
1;
1("
1@%
1d
1}"
1A#
1R#
1Y&
11
0D"
1B"
10$
1A$
1R$
0K%
0I%
0~%
1|%
0B&
1@&
1b&
0N
0M
1K
0p
0m
0#"
1!"
1~
0;%
19%
18%
0<
1:
09
0_
1]
0^
1\
0[
03"
11"
00"
0U"
0S"
1R"
0f"
1d"
0c"
0x"
1v"
0w"
1u"
0t"
0+#
1(#
0'#
0<#
1:#
09#
18#
0M#
1K#
0L#
1J#
0I#
0^#
1[#
0Z#
1l#
0k#
0}#
1|#
0c$
1b$
0w$
1t$
0s$
1'%
0&%
0\%
1Z%
0Y%
0m%
1k%
0j%
01&
0/&
1.&
0T&
1R&
0S&
1Q&
0P&
b0 +
0t&
b11111111111111111111111111111111 *
1r&
1)
b0 ,
0s&
0q&
1p&
08
0I
0Z
0k
0|
0/"
0@"
0Q"
0b"
0s"
0&#
07#
0H#
0Y#
0j#
0{#
0.$
0?$
0P$
0a$
0r$
0%%
06%
0G%
0X%
0i%
0z%
0-&
0>&
0O&
0`&
07
0H
1j
0{
0."
1P"
0a"
0i#
1z#
1`$
0$%
05%
0W%
0h%
1,&
06
0X
0-"
1O"
0`"
0q"
0$#
15#
0F#
0W#
0h#
1y#
1_$
0p$
0#%
0V%
0g%
1+&
0M&
1m&
b100 "
b100 0
b100 >
b100 A
b100 O
b100 R
b100 `
b100 c
b100 q
b100 t
b100 $"
b100 '"
b100 5"
b100 8"
b100 F"
b100 I"
b100 W"
b100 Z"
b100 h"
b100 k"
b100 y"
b100 |"
b100 ,#
b100 /#
b100 =#
b100 @#
b100 N#
b100 Q#
b100 _#
b100 b#
b100 p#
b100 s#
b100 #$
b100 &$
b100 4$
b100 7$
b100 E$
b100 H$
b100 V$
b100 Y$
b100 g$
b100 j$
b100 x$
b100 {$
b100 +%
b100 .%
b100 <%
b100 ?%
b100 M%
b100 P%
b100 ^%
b100 a%
b100 o%
b100 r%
b100 "&
b100 %&
b100 3&
b100 6&
b100 D&
b100 G&
b100 U&
b100 X&
b100 f&
b100 i&
b100 u&
b10001000100010001000100010001 (
b10001000100010001000100010001 '
#225000
